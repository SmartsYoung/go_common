// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test.proto

package protobuffer

import (
	proto "github.com/golang/protobuf/proto"
	"fmt"
	"math"
	"io/ioutil"
	"os"
	"time"
	"encoding/json"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 手机类型
// 枚举类型第一个字段必须是0
type PhoneType int32

const (
	PhoneType_HOME PhoneType = 0
	PhoneType_WORK PhoneType = 1
)

var PhoneType_name = map[int32]string{
	0: "HOME",
	1: "WORK",
}
var PhoneType_value = map[string]int32{
	"HOME": 0,
	"WORK": 1,
}

func (x PhoneType) String() string {
	return proto.EnumName(PhoneType_name, int32(x))
}
func (PhoneType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_test_9e89aff8799fe9b1, []int{0}
}

// 手机
type Phone struct {
	Type                 PhoneType `protobuf:"varint,1,opt,name=type,proto3,enum=test.PhoneType" json:"type,omitempty"`
	Number               string    `protobuf:"bytes,2,opt,name=number,proto3" json:"number,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Phone) Reset()         { *m = Phone{} }
func (m *Phone) String() string { return proto.CompactTextString(m) }
func (*Phone) ProtoMessage()    {}
func (*Phone) Descriptor() ([]byte, []int) {
	return fileDescriptor_test_9e89aff8799fe9b1, []int{0}
}
func (m *Phone) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Phone.Unmarshal(m, b)
}
func (m *Phone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Phone.Marshal(b, m, deterministic)
}
func (dst *Phone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Phone.Merge(dst, src)
}
func (m *Phone) XXX_Size() int {
	return xxx_messageInfo_Phone.Size(m)
}
func (m *Phone) XXX_DiscardUnknown() {
	xxx_messageInfo_Phone.DiscardUnknown(m)
}

var xxx_messageInfo_Phone proto.InternalMessageInfo

func (m *Phone) GetType() PhoneType {
	if m != nil {
		return m.Type
	}
	return PhoneType_HOME
}

func (m *Phone) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

// 人
type Persion struct {
	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// repeated 表示可以重复 可以有多个手机
	Phones               []*Phone `protobuf:"bytes,3,rep,name=phones,proto3" json:"phones,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Persion) Reset()         { *m = Persion{} }
func (m *Persion) String() string { return proto.CompactTextString(m) }
func (*Persion) ProtoMessage()    {}
func (*Persion) Descriptor() ([]byte, []int) {
	return fileDescriptor_test_9e89aff8799fe9b1, []int{1}
}
func (m *Persion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Persion.Unmarshal(m, b)
}
func (m *Persion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Persion.Marshal(b, m, deterministic)
}
func (dst *Persion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Persion.Merge(dst, src)
}
func (m *Persion) XXX_Size() int {
	return xxx_messageInfo_Persion.Size(m)
}
func (m *Persion) XXX_DiscardUnknown() {
	xxx_messageInfo_Persion.DiscardUnknown(m)
}

var xxx_messageInfo_Persion proto.InternalMessageInfo

func (m *Persion) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Persion) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Persion) GetPhones() []*Phone {
	if m != nil {
		return m.Phones
	}
	return nil
}

// 联系簿
type ContactBook struct {
	Persions             []*Persion `protobuf:"bytes,1,rep,name=persions,proto3" json:"persions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ContactBook) Reset()         { *m = ContactBook{} }
func (m *ContactBook) String() string { return proto.CompactTextString(m) }
func (*ContactBook) ProtoMessage()    {}
func (*ContactBook) Descriptor() ([]byte, []int) {
	return fileDescriptor_test_9e89aff8799fe9b1, []int{2}
}
func (m *ContactBook) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContactBook.Unmarshal(m, b)
}
func (m *ContactBook) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContactBook.Marshal(b, m, deterministic)
}
func (dst *ContactBook) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContactBook.Merge(dst, src)
}
func (m *ContactBook) XXX_Size() int {
	return xxx_messageInfo_ContactBook.Size(m)
}
func (m *ContactBook) XXX_DiscardUnknown() {
	xxx_messageInfo_ContactBook.DiscardUnknown(m)
}

var xxx_messageInfo_ContactBook proto.InternalMessageInfo

func (m *ContactBook) GetPersions() []*Persion {
	if m != nil {
		return m.Persions
	}
	return nil
}

func init() {
	proto.RegisterType((*Phone)(nil), "test.Phone")
	proto.RegisterType((*Persion)(nil), "test.Persion")
	proto.RegisterType((*ContactBook)(nil), "test.ContactBook")
	proto.RegisterEnum("test.PhoneType", PhoneType_name, PhoneType_value)
}

func init() { proto.RegisterFile("test.proto", fileDescriptor_test_9e89aff8799fe9b1) }

var fileDescriptor_test_9e89aff8799fe9b1 = []byte{
	// 216 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x3f, 0x6b, 0x85, 0x30,
	0x14, 0xc5, 0x1b, 0x5f, 0x9e, 0x7d, 0x5e, 0xa9, 0x95, 0x3b, 0x94, 0x6c, 0x15, 0x5d, 0x6c, 0x07,
	0x07, 0xbb, 0x74, 0xee, 0x1f, 0x28, 0x94, 0xa2, 0x84, 0x42, 0x67, 0xad, 0x81, 0x4a, 0x31, 0x09,
	0x26, 0x1d, 0xfc, 0xf6, 0xc5, 0x18, 0xe4, 0x6d, 0x27, 0xf9, 0xdd, 0x73, 0xce, 0xe5, 0x02, 0x58,
	0x61, 0x6c, 0xa5, 0x67, 0x65, 0x15, 0xd2, 0x55, 0xe7, 0x2f, 0x70, 0x6c, 0x7f, 0x94, 0x14, 0x58,
	0x00, 0xb5, 0x8b, 0x16, 0x8c, 0x64, 0xa4, 0x4c, 0xea, 0xeb, 0xca, 0x4d, 0x3a, 0xf4, 0xb9, 0x68,
	0xc1, 0x1d, 0xc4, 0x1b, 0x08, 0xe5, 0xdf, 0xd4, 0x8b, 0x99, 0x05, 0x19, 0x29, 0x23, 0xee, 0x5f,
	0x39, 0x87, 0xcb, 0x56, 0xcc, 0x66, 0x54, 0x12, 0x13, 0x08, 0xc6, 0xc1, 0xa5, 0x1c, 0x79, 0x30,
	0x0e, 0x88, 0x40, 0x65, 0x37, 0x09, 0x6f, 0x70, 0x1a, 0x0b, 0x08, 0xf5, 0x9a, 0x6c, 0xd8, 0x21,
	0x3b, 0x94, 0x71, 0x1d, 0x9f, 0xb5, 0x71, 0x8f, 0xf2, 0x47, 0x88, 0x9f, 0x95, 0xb4, 0xdd, 0xb7,
	0x7d, 0x52, 0xea, 0x17, 0xef, 0xe0, 0xa4, 0xb7, 0x0a, 0xc3, 0x88, 0x73, 0x5d, 0x79, 0xd7, 0xf6,
	0xcb, 0x77, 0x7c, 0x7f, 0x0b, 0xd1, 0xbe, 0x38, 0x9e, 0x80, 0xbe, 0x35, 0x1f, 0xaf, 0xe9, 0xc5,
	0xaa, 0xbe, 0x1a, 0xfe, 0x9e, 0x92, 0x3e, 0x74, 0x17, 0x78, 0xf8, 0x0f, 0x00, 0x00, 0xff, 0xff,
	0x7e, 0x99, 0x37, 0x19, 0x0f, 0x01, 0x00, 0x00,
}



//======================================================================================================================



func Write() {

	p1 := &Persion{
		Id:   1,
		Name: "小张",
		Phones: []*Phone{
			{Type: PhoneType_HOME, Number: "111111111"},
			{Type:PhoneType_WORK, Number:"222222222"},
		},
	};
	p2 := &Persion{
		Id:   2,
		Name: "小王",
		Phones: []*Phone{
			{Type:PhoneType_HOME, Number:"333333333"},
			{Type:PhoneType_WORK, Number:"444444444"},
		},
	};

	//创建地址簿
	book := &ContactBook{};
	book.Persions = append(book.Persions, p1);
	book.Persions = append(book.Persions, p2);
	//编码数据
	data, _ := proto.Marshal(book);
	//把数据写入文件
	ioutil.WriteFile("./test.txt", data, os.ModePerm);
}

func Read() {
	//读取文件数据
	data, _ := ioutil.ReadFile("./test.txt");
	book := &ContactBook{};
	//解码数据
	proto.Unmarshal(data, book);
	for _, v := range book.Persions {
		fmt.Println(v.Id, v.Name);
		for _, vv := range v.Phones {
			fmt.Println(vv.Type, vv.Number);
		}
	}
}


func BenchMarkJson(){
	p1 := &Persion{
		Id:   1,
		Name: "小张",
		Phones: []*Phone{
			{Type: PhoneType_HOME, Number: "111111111"},
			{Type:PhoneType_WORK, Number:"222222222"},
		},
	};
	//创建地址簿
	book := &ContactBook{};
	book.Persions = append(book.Persions, p1);


	book1 := &ContactBook{};

	start := time.Now().UnixNano()
	for i:=0;i<10000;i++{
		bs,_:=json.Marshal(book); //序列化
		json.Unmarshal(bs,book1)
	}
	end := time.Now().UnixNano()

	fmt.Println((end-start)/1000/1000)
}

func BenchMarkProto(){
	p1 := &Persion{
		Id:   1,
		Name: "小张",
		Phones: []*Phone{
			{Type: PhoneType_HOME, Number: "111111111"},
			{Type:PhoneType_WORK, Number:"222222222"},
		},
	};
	//创建地址簿
	book := &ContactBook{};
	book.Persions = append(book.Persions, p1);


	book1 := &ContactBook{};

	start := time.Now().UnixNano()
	for i:=0;i<10000;i++{
		bs,_:=proto.Marshal(book); //序列化
		proto.Unmarshal(bs,book1)
	}
	end := time.Now().UnixNano()

	fmt.Println((end-start)/1000/1000)
}
